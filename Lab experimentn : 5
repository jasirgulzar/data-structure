#include<stdio.h>
#include<stdlib.h>
#include<ctype.h>
#include<string.h>
int precedence(char op){
    switch(op){
        case '+':
        case '-':
        return 1;
        case '*':
        case '/':
        return 2;
        case '^':
        return 3;
        default:
        return -1;
    }
}
char* convertInfixtopostfix(char *exp){
    int size = strlen(exp),top=-1,index=0;
    char operator[size];
    char *str = (char*)malloc(size+1);
    for(int i=0; i<size;i++){
        char ch=exp[i];
        if(isdigit(ch) || isalpha(ch))
        str[index++] = ch;
    else if (ch== '+' || ch== '-' ||ch== '*' || ch== '/' || ch== '^'){
        if(top == -1)
        operator[++top]=ch;
    else{
        while(top!=-1 && precedence(ch)<=precedence(operator[top])){
            str[index++]=operator[top--];
        }
        operator[++top]=ch;
    }
    }
    else if (ch == '(')
    operator[++top] = ch;
else if(ch == ')'){
    while(operator[top] != '('){
        str[index++] = operator[top--];
    }
    top--;
}
    }
      while(top!=-1){
        str[index++] = operator[top--];
    }
    str[index] = '\0';
    return str;
}
char* strrev(char *str){
int size = strlen(str),i,j;
char *temp = (char*)malloc(size+1);
for(i=size-1,j=0;i>=0,i--;j++){
    temp[j] = str[i];
}
temp[j]= '\0';
return temp;
}
char* convertInfixtoprefix(char *exp){
    int size = strlen(exp),top=-1,index=0;
    char operator[size];
    char *str = (char*)malloc(size+1);
    for(int i=size-1; i>=0; i--){
        char ch=exp[i];
        if(isdigit(ch) || isalpha(ch))
        str[index++] = ch;
    else if (ch== '+' || ch== '-' ||ch== '*' || ch== '/' || ch== '^'){
        if(top == -1)
        operator[++top]=ch;
    else{
        while(top!=-1 && precedence(ch)<=precedence(operator[top])){
            str[index++]=operator[top--];
        }
        operator[++top]=ch;
    }
    }
    else if (ch == ')')
    operator[++top] = ch;
else if(ch == '('){
    while(operator[top] != ')'){
        str[index++] = operator[top--];
    }
    top--;
}
    }
    while(top!=-1){
        str[index++] = operator[top--];
    }
    str[index] = '\0';
    return strrev(str);
}
char* convertpostfixtoInfix(char *exp){
    int size = strlen(exp) , top = -1;
    char stack[size][100];
   for(int i=0;i<size;i++){
    char ch = exp[i];
    if(isalnum(ch)){
        char temp[]={ch, '\0'};
       strcpy(stack[++top],temp);
    }
    else if (ch =='+' || ch =='-' || ch == '*' || ch == '/'|| ch == '^'){
         char *s1 = stack[top--]; 
           char *s2 = stack[top--];
        char s3[100];
        snprintf(s3, 100, "%s%c%s",s2,ch,s1);
        strcpy(stack[++top],s3);
          }
     }
     char *s = stack[top];
     return s;
}
char* convertprefixtoInfix(char *exp){
    int size = strlen(exp) , top = -1;
    char stack[size][100];
   for(int i=size-1;i>=0;i--){
    char ch = exp[i];
    if(isalnum(ch)){
        char temp[]={ch, '\0'};
       strcpy(stack[++top],temp);
    }
    else if (ch =='+' || ch =='-' || ch == '*' || ch == '/'|| ch == '^'){
         char *s1 = stack[top--]; 
           char *s2 = stack[top--];
        char s3[100];
        snprintf(s3, 100, "%s%c%s",s1,ch,s2);
        strcpy(stack[++top],s3);
          }
     }
     char *s = stack[top];
     return s;
}
int main(){
     char exp[100];
     printf("enter Infix expression :");
     gets(exp);
     printf("postfix form of infix expression %s is %s \n", exp, convertInfixtopostfix(exp) );
      printf("prefix form of infix expression %s is %s \n", exp, convertInfixtoprefix(exp) );
      printf("enter postfix expression :");
      gets(exp);
       printf("Infix form of postfix expression %s is %s \n", exp, convertpostfixtoInfix(exp) );
       printf("enter prefix expression :");
      gets(exp);
       printf("Infix form of postfix expression %s is %s \n", exp, convertprefixtoInfix(exp) );
    return 0;
}
